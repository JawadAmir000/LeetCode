class Solution {
public:
    
    int dp[3001];
    int help(int i, string s, set<string> st)
    {
        if(i== s.size()) return 1;
        string temp;
        if(dp[i] != -1) 
        {
            cout<<"dp got value"<<dp[i]<<" ";
            return dp[i];
        }
        ;
        for(int j=i; j<s.size(); j++)
        {
            temp+=s[j];
            if(st.find(temp) != st.end())
            {
                if(help(j+1,s,st)) 
                {
                    cout<<"dp donmt got value"<<i<<dp[i]<<" "<<endl;
                    return  dp[i]=1;
                }
            }
        }
        return dp[i]= 0;
    }
    
    bool wordBreak(string s, vector<string>& wordDict) {
        set<string>st;
        memset(dp,-1,sizeof dp);
        for(auto i : wordDict) st.insert(i);
        return help(0,s,st);
    }
};